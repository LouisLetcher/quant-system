name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.12"

jobs:
  lint-and-format:
    name: Linting and Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
        
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
      
    - name: Install project
      run: poetry install --no-interaction
      
    - name: Run Ruff linter
      run: poetry run ruff check src/ tests/
      
    - name: Run Ruff formatter check
      run: poetry run ruff format --check src/ tests/
      
    - name: Run Black check
      run: poetry run black --check src/ tests/
      
    - name: Run isort check
      run: poetry run isort --check-only src/ tests/
      
    - name: Run mypy type checking
      run: poetry run mypy src/ --ignore-missing-imports
      continue-on-error: true  # Type checking can be strict, allow to pass for now

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
        
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
      
    - name: Install project
      run: poetry install --no-interaction
      
    - name: Run unit tests
      run: poetry run pytest tests/core/ -v --cov=src/core --cov-report=xml --cov-report=term-missing -m "not slow and not requires_api"
      
    - name: Run integration tests
      run: poetry run pytest tests/integration/ -v --cov=src --cov-append --cov-report=xml --cov-report=term-missing -m "not slow and not requires_api"
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  test-slow:
    name: Run Slow Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
        
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
      
    - name: Install project
      run: poetry install --no-interaction
      
    - name: Run slow tests
      run: poetry run pytest tests/ -v -m "slow" --timeout=600
      
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Install dependencies
      run: poetry install --no-interaction --no-root
      
    - name: Run safety check
      run: poetry run safety check --json
      continue-on-error: true
      
    - name: Run bandit security linter
      run: poetry run bandit -r src/ -f json
      continue-on-error: true

  docker:
    name: Docker Build and Test
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: quant-system:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        docker run --rm quant-system:test python -m src.cli.unified_cli --help
        docker run --rm quant-system:test python -m src.cli.unified_cli cache stats

  pre-commit:
    name: Pre-commit Hooks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Install dependencies
      run: poetry install --no-interaction
      
    - name: Run pre-commit
      uses: pre-commit/action@v3.0.1

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check README exists
      run: test -f README.md
      
    - name: Check docs directory
      run: test -d docs/
      
    - name: Validate documentation structure
      run: |
        test -f docs/OPTIMIZATION_GUIDE.md
        test -f RESTRUCTURING_SUMMARY.md
        test -f examples/comprehensive_example.py

  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Install dependencies
      run: poetry install --no-interaction
      
    - name: Run performance benchmarks
      run: |
        poetry run python -c "
        import time
        from src.core.cache_manager import UnifiedCacheManager
        import pandas as pd
        import numpy as np
        
        # Simple performance test
        cache = UnifiedCacheManager(cache_dir='./test_cache', max_size_gb=1.0)
        data = pd.DataFrame(np.random.randn(1000, 5))
        
        start = time.time()
        cache.cache_data('perf_test', data)
        retrieved = cache.get_data('perf_test')
        end = time.time()
        
        print(f'Cache round-trip time: {end - start:.3f}s')
        assert isinstance(retrieved, pd.DataFrame)
        print('Performance test passed')
        "
