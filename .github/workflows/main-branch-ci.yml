name: Main Branch CI/CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.12"
  POETRY_VERSION: "1.8.0"

jobs:
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cached-poetry-dependencies.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root --with dev

      - name: Install project
        run: poetry install --no-interaction

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    needs: setup
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          config-file: '.github/dependency-review-config.yml'
          fail-on-severity: moderate
          fail-on-scopes: runtime

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root --with dev

      - name: Install project
        run: poetry install --no-interaction

      - name: Check for known vulnerabilities
        run: poetry run safety check --full-report

      - name: Generate dependency tree
        run: poetry show --tree > dependency-tree.txt

      - name: Upload dependency analysis
        uses: actions/upload-artifact@v4
        with:
          name: dependency-analysis
          path: |
            dependency-tree.txt

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: dependency-review
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root --with dev

      - name: Install project
        run: poetry install --no-interaction

      - name: Run comprehensive tests with coverage
        run: |
          mkdir -p reports_output
          poetry run pytest tests/ --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing --cov-fail-under=80

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Code Climate Analysis
        uses: paambaati/codeclimate-action@v5.0.0
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        with:
          coverageCommand: poetry run pytest tests/ --cov=src --cov-report=xml
          coverageLocations: coverage.xml:coverage.py

      - name: Upload to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

      - name: Run complexity analysis
        run: |
          poetry run radon cc src/ --min=B --show-complexity --output-file=complexity-report.txt || true
          poetry run radon mi src/ --min=B --output-file=maintainability-report.txt || true

      - name: Upload code quality reports
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-reports
          path: |
            reports_output/
            complexity-report.txt
            maintainability-report.txt

  performance-budget:
    name: Performance Budget Analysis
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root --with dev

      - name: Install project
        run: poetry install --no-interaction

      - name: Run performance benchmarks
        run: |
          mkdir -p performance_reports
          poetry run python -m pytest tests/performance/ --benchmark-only --benchmark-json=performance_reports/benchmark.json || true

      - name: Analyze package size
        run: |
          poetry build
          du -sh dist/* > performance_reports/package-size.txt
          echo "Package contents:" >> performance_reports/package-size.txt
          tar -tzf dist/*.tar.gz | head -20 >> performance_reports/package-size.txt

      - name: Memory profiling
        run: |
          poetry run python -m memory_profiler scripts/memory_profile.py > performance_reports/memory-profile.txt || true

      - name: Check import time
        run: |
          python -c "import time; start = time.time(); import src; print(f'Import time: {time.time() - start:.3f}s')" > performance_reports/import-time.txt

      - name: Performance budget check
        run: |
          echo "=== Performance Budget Check ===" > performance_reports/budget-check.txt
          echo "Package size limit: 50MB" >> performance_reports/budget-check.txt
          echo "Import time limit: 2s" >> performance_reports/budget-check.txt
          echo "Memory usage limit: 100MB" >> performance_reports/budget-check.txt
          echo "" >> performance_reports/budget-check.txt

          # Check package size
          SIZE=$(du -sm dist/*.tar.gz | cut -f1)
          echo "Current package size: ${SIZE}MB" >> performance_reports/budget-check.txt
          if [ $SIZE -gt 50 ]; then
            echo "❌ Package size exceeds budget!" >> performance_reports/budget-check.txt
            exit 1
          else
            echo "✅ Package size within budget" >> performance_reports/budget-check.txt
          fi

      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports
          path: performance_reports/

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: performance-budget
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Build package
        run: poetry build

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: quant-system:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy Documentation
        run: |
          mkdir -p docs_output
          cp -r docs/* docs_output/
          cp README.md docs_output/
          poetry run python -m src.reporting.generate_docs || true

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: success()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs_output

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: dist/*
          generate_release_notes: true
