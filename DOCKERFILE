# Multi-stage build for optimized production image
FROM python:3.12-slim AS base

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    POETRY_VERSION=1.8.3 \
    POETRY_HOME="/opt/poetry" \
    POETRY_CACHE_DIR=/tmp/poetry_cache \
    POETRY_VENV_IN_PROJECT=1 \
    POETRY_NO_INTERACTION=1

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry
RUN pip install poetry==$POETRY_VERSION

# Set work directory
WORKDIR /app

# Copy dependency files
COPY pyproject.toml ./

# Configure poetry and install dependencies
RUN poetry config virtualenvs.create false \
    && poetry lock --no-update \
    && poetry install --only main --no-root \
    && rm -rf $POETRY_CACHE_DIR

# Production stage
FROM python:3.12-slim AS production

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PATH="/app/.venv/bin:$PATH" \
    PYTHONPATH="/app:$PYTHONPATH"

# Install runtime dependencies only
RUN apt-get update && apt-get install -y \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN groupadd -r quantuser && useradd -r -g quantuser quantuser

# Set work directory
WORKDIR /app

# Copy installed packages from base stage
COPY --from=base /usr/local/lib/python3.12/site-packages /usr/local/lib/python3.12/site-packages
COPY --from=base /usr/local/bin /usr/local/bin

# Copy application code
COPY src/ ./src/
COPY config/ ./config/
COPY scripts/ ./scripts/
COPY pyproject.toml ./

# Create necessary directories
RUN mkdir -p cache exports logs \
    && chown -R quantuser:quantuser /app

# Switch to non-root user
USER quantuser

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD python -m src.cli.unified_cli cache stats || exit 1

# Default command
CMD ["python", "-m", "src.cli.unified_cli", "--help"]

# Development stage
FROM base AS development

# Install development dependencies
RUN poetry install --no-root

# Copy all files for development
COPY . .

# Create necessary directories
RUN mkdir -p cache exports logs tests

# Set development environment
ENV ENVIRONMENT=development

# Default command for development
CMD ["bash"]

# Testing stage
FROM development AS testing

# Install test dependencies
RUN poetry install

# Copy test files
COPY tests/ ./tests/
COPY pytest.ini ./

# Run tests
CMD ["poetry", "run", "pytest", "tests/", "-v"]

# Jupyter stage for data analysis
FROM development AS jupyter

# Install Jupyter and additional analysis tools
RUN poetry add jupyter jupyterlab plotly seaborn

# Expose Jupyter port
EXPOSE 8888

# Create Jupyter config
RUN mkdir -p /app/.jupyter && \
    echo "c.NotebookApp.token = ''" > /app/.jupyter/jupyter_notebook_config.py && \
    echo "c.NotebookApp.password = ''" >> /app/.jupyter/jupyter_notebook_config.py && \
    echo "c.NotebookApp.open_browser = False" >> /app/.jupyter/jupyter_notebook_config.py && \
    echo "c.NotebookApp.ip = '0.0.0.0'" >> /app/.jupyter/jupyter_notebook_config.py

# Start Jupyter Lab
CMD ["jupyter", "lab", "--allow-root", "--config=/app/.jupyter/jupyter_notebook_config.py"]

# API stage for web services
FROM production AS api

# Expose API port
EXPOSE 8000

# Install API dependencies
RUN pip install uvicorn[standard] fastapi

# Start API server
CMD ["uvicorn", "src.api.main:app", "--host", "0.0.0.0", "--port", "8000"]
