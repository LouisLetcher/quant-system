line-length = 88
unsafe-fixes = false
target-version = "py39"
extend = "./pyproject.toml"
exclude = [
    # docs
    "docsrc/**/*",
    # examples
    "examples/**/*",
    # submodules - strategies are managed in separate repo
    "src/backtesting_engine/**/*",
]

[lint]
extend-select = [
    "D",      # pydocstyle
    "D417",   # undocumented-param
    "I",      # isort
    "UP",     # pyupgrade
    "G",      # flake8-logging-format
    "PT",     # flake8-pytest-style
    "E",      # pycodestyle
    "W",      # pycodestyle
    "PGH",    # pygrep-hooks
    "B",      # flake8-bugbear
    "SIM",    # flake8-simplify
    "S",      # flake8-bandit
    "DTZ",    # flake8-datetimez
    "EM",     # flake8-errmsg
    "PIE",    # flake8-pie
    "Q",      # flake8-quotes
    "RET",    # flake8-return
    "TID",    # flake8-tidy-imports
    "PTH",    # flake8-use-pathlib
    "F",      # Pyflakes
    "NPY",    # NumPy-specific rules
    "PERF",   # Perflint
    "RUF",    # Ruff-specific rules
    "ISC",    # flake8-implicit-str-concat
    "TRY002", # raise-vanilla-class
]
ignore = [
    "PT011", # TODO
    # pydocstyle numpy default
    "D203",
    "D212",
    "D213",
    "D214",
    "D215",
    "D404",
    "D405",
    "D406",
    "D407",
    "D408",
    "D409",
    "D410",
    "D411",
    "D413",
    "D415",
    "D416",
    # ruff format
    "W191",   # tab-indentation
    "E111",   # indentation-with-invalid-multiple
    "E114",   # indentation-with-invalid-multiple-comment
    "E117",   # over-indented
    "D206",   # indent-with-spaces
    "D300",   # triple-single-quotes
    "Q000",   # bad-quotes-inline-string
    "Q001",   # bad-quotes-multiline-string
    "Q002",   # bad-quotes-docstring
    "Q003",   # avoidable-escaped-quote
    "COM812", # missing-trailing-comma
    "COM819", # prohibited-trailing-comma
    "ISC001", # single-line-implicit-string-concatenation
    "ISC002", # multi-line-implicit-string-concatenation
    # Additional ignores for problematic rules
    "S311",   # Standard pseudo-random generators are not suitable for cryptographic purposes
    "DTZ005", # datetime.datetime.now() called without a tz argument
    "DTZ007", # Naive datetime constructed using datetime.datetime.strptime() without %z
    "B018",   # Found useless attribute access
    "D100",   # Missing docstring in public module
    "D101",   # Missing docstring in public class
    "D102",   # Missing docstring in public method
    "B904",   # Within an except clause, raise exceptions with raise ... from err
    # Additional showcase project ignores
    "D103",   # Missing docstring in public function
    "D104",   # Missing docstring in public package
    "D105",   # Missing docstring in magic method
    "D106",   # Missing docstring in public nested class
    "D107",   # Missing docstring in __init__
    "D200",   # One-line docstring should fit on one line
    "D202",   # No blank lines allowed after function docstring
    "D205",   # 1 blank line required between summary line and description
    "D400",   # First line should end with a period
    "D401",   # First line should be in imperative mood
    "D402",   # First line should not be the function's signature
    "DTZ001", # datetime.datetime() called without a tzinfo argument
    "DTZ003", # datetime.datetime.utcnow() is deprecated
    "DTZ006", # datetime.datetime.fromtimestamp() called without a tz argument
    "EM101",  # Exception must not use a string literal
    "EM102",  # Exception must not use an f-string literal
    "TRY003", # Avoid specifying long messages outside the exception class
    "PERF401", # Use a list comprehension to create a transformed list
    "PERF203", # try-except within a loop incurs performance overhead
    "RUF012", # Mutable class attributes should be annotated with ClassVar
    "UP006",  # Use new-style typing annotations
    "UP007",  # Use new-style union syntax
    "UP035",  # typing.* imports are deprecated
    "UP045",  # Use new-style Optional annotations
    "RET504", # Unnecessary assignment before return
    "SIM102", # Use single if statement
    "SIM103", # Return condition directly
    "SIM105", # Use contextlib.suppress
    "SIM118", # Use key in dict
    "PTH100", # Use pathlib instead of os.path
    "PTH110", # Use pathlib instead of os.path
    "PTH120", # Use pathlib instead of os.path
    "B007",   # Unused loop control variable
    "B904",   # raise without from in except
    "E402",   # Module import not at top
    "E501",   # Line too long
    "E722",   # Bare except
    "F811",   # Redefined while unused

    "NPY002", # Replace legacy numpy calls
    "RUF015", # Unnecessary iterable allocation
    "S110",   # try-except-pass
    "S301",   # Pickle usage
    "S603",   # subprocess call
    "S608",   # Hardcoded SQL
    "W291",   # Trailing whitespace
    "SIM103", # Return condition directly
]
fixable = [
    "I",
    "UP",
    "ISC",
    "G",
    "PT",
    "E",
    "W",
    "PGH",
    "B",
    "SIM",
    "S",
    "PIE",
    "Q",
    "RET",
    "TID",
    "PTH",
    "F",
    "NPY",
    "PERF",
    "RUF",
]

[lint.per-file-ignores]
"tests/**/*.py" = ["S101"]  # Allow assert statements in tests
"scripts/**/*.py" = ["S101", "S602"]  # Allow assert statements and subprocess shell=True in scripts
"src/portfolio/advanced_optimizer.py" = ["F821"]  # Optional import issue

[format]
indent-style = "space"
quote-style = "double"
skip-magic-trailing-comma = true
docstring-code-format = true
docstring-code-line-length = "dynamic"

[lint.pylint]
max-args = 10

[lint.isort]
known-first-party = ["src"]
required-imports = ["from __future__ import annotations"]
force-single-line = false
split-on-trailing-comma = false

[lint.pydocstyle]
convention = "numpy"

[lint.flake8-pytest-style]
fixture-parentheses = false
